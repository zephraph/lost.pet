---
import Layout from '../layouts/Layout.astro';
import Icon from '../components/Icon.astro';
import LocationMap from '../components/LocationMap.tsx';

// We'll keep this for potential server-side use, but won't display it in the form
const today = new Date().toISOString().split('T')[0];
---

<Layout title="Report Pet Sighting">
    <main>
        <div class="mt-12 flex flex-col items-center">
            <a href="/">
              <Icon size={100}/>
            </a>
            <h1 class="text-2xl font-bold mt-6 mb-8">Report a Pet Sighting</h1>
            <form class="w-full max-w-md" enctype="multipart/form-data">
                <div class="mb-4">
                    <label class="block mb-2">Photo</label>
                    <div class="flex space-x-2 mb-2">
                        <button type="button" id="takePhotoBtn" class="btn btn-outline flex-1 mobile-only">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M4 5a2 2 0 00-2 2v8a2 2 0 002 2h12a2 2 0 002-2V7a2 2 0 00-2-2h-1.586a1 1 0 01-.707-.293l-1.121-1.121A2 2 0 0011.172 3H8.828a2 2 0 00-1.414.586L6.293 4.707A1 1 0 015.586 5H4zm6 9a3 3 0 100-6 3 3 0 000 6z" clip-rule="evenodd" />
                            </svg>
                            Take Photo
                        </button>
                        <button type="button" id="uploadPhotoBtn" class="btn btn-outline flex-1">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM6.293 6.707a1 1 0 010-1.414l3-3a1 1 0 011.414 0l3 3a1 1 0 01-1.414 1.414L11 5.414V13a1 1 0 11-2 0V5.414L7.707 6.707a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                            </svg>
                            Upload Photo
                        </button>
                    </div>
                    <input type="file" id="petImage" name="petImage" accept="image/*" class="hidden">
                    <video id="camera" class="w-full h-48 bg-gray-100 hidden" autoplay playsinline></video>
                    <canvas id="canvas" class="hidden"></canvas>
                    <div id="imagePreview" class="mt-2 w-full h-48 bg-gray-100 flex items-center justify-center hidden">
                        <img id="previewImage" src="" alt="Pet Image Preview" class="max-w-full max-h-full object-contain">
                    </div>
                </div>
                <div class="mb-4">
                    <label for="petType" class="block mb-2">Pet Type</label>
                    <select id="petType" name="petType" class="select select-bordered w-full" required>
                        <option value="">Select pet type</option>
                        <option value="dog">Dog</option>
                        <option value="cat">Cat</option>
                        <option value="other">Other</option>
                    </select>
                </div>
                <div class="mb-4">
                    <label for="seenLocation" class="block mb-2">Location Seen</label>
                    <input type="text" id="seenLocation" name="seenLocation" class="input input-bordered w-full mb-2" placeholder="Enter the location (e.g., 'corner of Classon and Washington')" required>
                    <div id="map" class="w-full h-64 bg-gray-200 rounded-lg">
                        <LocationMap client:only="react" for="seenLocation" defaultLocation={{ lat: 40.7128, lng: -74.006 }} />
                    </div>
                </div>
                <div class="mb-4">
                    <label for="description" class="block mb-2">Description</label>
                    <textarea id="description" name="description" rows="4" class="textarea textarea-bordered w-full" placeholder="Describe the pet's appearance, behavior, etc." required></textarea>
                </div>
                <div class="mb-4">
                    <label for="contactInfo" class="block mb-2">Your Contact Information</label>
                    <input type="text" id="contactInfo" name="contactInfo" class="input input-bordered w-full" placeholder="Phone number or email" required>
                </div>
                <button type="submit" class="btn btn-primary w-full">Submit Sighting</button>
            </form>
        </div>
    </main>
</Layout>

<style>
    main {
        margin: 0 auto;
        padding: 1rem;
        width: 800px;
        max-width: calc(100% - 2rem);
        background: white;
        font-size: 16px;
        line-height: 1.6;
    }
</style>

<script>
    const takePhotoBtn = document.getElementById('takePhotoBtn');
    const uploadPhotoBtn = document.getElementById('uploadPhotoBtn');
    const imageInput = document.getElementById('petImage') as HTMLInputElement;
    const imagePreview = document.getElementById('imagePreview');
    const previewImage = document.getElementById('previewImage') as HTMLImageElement;
    const video = document.getElementById('camera') as HTMLVideoElement;
    const canvas = document.getElementById('canvas') as HTMLCanvasElement;

    let stream: MediaStream | null = null;

    takePhotoBtn?.addEventListener('click', async () => {
        try {
            stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } });
            video.srcObject = stream;
            video.classList.remove('hidden');
            imagePreview?.classList.add('hidden');
        } catch (err) {
            console.error("Error accessing camera:", err);
        }
    });

    video.addEventListener('click', () => {
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        canvas.getContext('2d')?.drawImage(video, 0, 0);
        
        canvas.toBlob((blob) => {
            if (blob) {
                const file = new File([blob], "photo.jpg", { type: "image/jpeg" });
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                imageInput.files = dataTransfer.files;
                
                previewImage.src = URL.createObjectURL(blob);
                imagePreview?.classList.remove('hidden');
                video.classList.add('hidden');
                
                if (stream) {
                    stream.getTracks().forEach(track => track.stop());
                }
            }
        }, 'image/jpeg');
    });

    uploadPhotoBtn?.addEventListener('click', () => {
        imageInput.click();
    });

    imageInput?.addEventListener('change', (event) => {
        const file = (event.target as HTMLInputElement).files?.[0];
        if (file && imagePreview && previewImage) {
            const reader = new FileReader();
            reader.onload = (e) => {
                if (e.target?.result) {
                    previewImage.src = e.target.result as string;
                    imagePreview.classList.remove('hidden');
                    video.classList.add('hidden');
                }
            };
            reader.readAsDataURL(file);
        } else if (imagePreview) {
            imagePreview.classList.add('hidden');
        }
    });
</script>
